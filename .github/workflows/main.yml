name: Main

on:
  workflow_dispatch:
  push:
    branches: ['*']

jobs:
  checking-format:
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
            node-version: 18

      - name: Setup pnpm
        # You may pin to the exact commit or the version.
        # uses: pnpm/action-setup@c3b53f6a16e57305370b4ae5a540c2077a1d50dd
        uses: pnpm/action-setup@v2.2.4
        with:
            # Version of pnpm to install
            version: 7.21.0

      - name: GitHub Action for npx
        # You may pin to the exact commit or the version.
        # uses: mikeal/npx@e7aaefed7c9f2e83d493ff810f17fa5ccd7ed437
        uses: mikeal/npx@1.0.0

      - name: Install dependencies
        run: pnpm install

      - name: Check the formating
        run: npx -y prettier --check "src/**/*.ts"
  fomating-files:
    runs-on: ubuntu-latest
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
            node-version: 18

      - name: Setup pnpm
        # You may pin to the exact commit or the version.
        # uses: pnpm/action-setup@c3b53f6a16e57305370b4ae5a540c2077a1d50dd
        uses: pnpm/action-setup@v2.2.4
        with:
            # Version of pnpm to install
            version: 7.21.0

      - name: GitHub Action for npx
        # You may pin to the exact commit or the version.
        # uses: mikeal/npx@e7aaefed7c9f2e83d493ff810f17fa5ccd7ed437
        uses: mikeal/npx@1.0.0

      - name: Install dependencies
        run: pnpm install

      - name: Format the files
        run: npx -y prettier --write ./src/**/*.ts

      - run: git config --global user.email "actions@github.com"
      - run: git config --global user.name "GitHub Action"
      - run: git remote set-url origin https://lapstimeoff:${{ secrets.GITHUB_TOKEN }}@github.com/lapstimeoff/f1mv_watchgroups.git
      - run: git add .
      - run: git commit -m "Prettier edits"
      - run: git push origin HEAD:stable
    needs: checking-format
    if: ${{ failure() }}
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Use only 'java' to analyze code written in Java, Kotlin or both
        # Use only 'javascript' to analyze code written in JavaScript, TypeScript or both
        # Learn more about CodeQL language support at https://aka.ms/codeql-docs/language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # Details on CodeQL's query packs refer to : https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality


    # Autobuild attempts to build any compiled languages  (C/C++, C#, Go, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    # ‚ÑπÔ∏è Command-line programs to run using the OS shell.
    # üìö See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun

    #   If the Autobuild fails above, remove it and uncomment the following three lines.
    #   modify them (or add more) to build your code if your project, please refer to the EXAMPLE below for guidance.

    # - run: |
    #   echo "Run, Build Application using script"
    #   ./location_of_script_within_repo/buildscript.sh

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      with:
        category: "/language:${{matrix.language}}"
  codacy-security-scan:
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    name: Codacy Security Scan
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout code
        uses: actions/checkout@v3

      # Execute Codacy Analysis CLI and generate a SARIF output with the security issues identified during the analysis
      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@d840f886c4bd4edc059706d09c6a1586111c540b
        with:
          # Check https://github.com/codacy/codacy-analysis-cli#project-token to get your project token from your Codacy repository
          # You can also omit the token and run the tools that support default configurations
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          verbose: true
          output: results.sarif
          format: sarif
          # Adjust severity of non-security issues
          gh-code-scanning-compat: true
          # Force 0 exit code to allow SARIF file generation
          # This will handover control about PR rejection to the GitHub side
          max-allowed-issues: 2147483647

      # Upload the SARIF file generated in the previous step
      - name: Upload SARIF results file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: results.sarif
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 18
      
      - name: Setup pnpm
        # You may pin to the exact commit or the version.
        # uses: pnpm/action-setup@c3b53f6a16e57305370b4ae5a540c2077a1d50dd
        uses: pnpm/action-setup@v2.2.4
        with:
          # Version of pnpm to install
          version: 7.21.0
        
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

  make:
    runs-on: ${{ matrix.os }}
    needs: build

    strategy:
      matrix:
        os: [macos-12, ubuntu-latest, windows-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Install Node.js, NPM and Yarn
        uses: actions/setup-node@v1
        with:
          node-version: 18
      
      - name: Setup pnpm
        # You may pin to the exact commit or the version.
        # uses: pnpm/action-setup@c3b53f6a16e57305370b4ae5a540c2077a1d50dd
        uses: pnpm/action-setup@v2.2.4
        with:
          # Version of pnpm to install
          version: 7.21.0
        
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile

      - if: matrix.os == 'macos-12'
        name: Build/release Electron app darwin/universal
        run: pnpm make --arch=universal --platform=darwin
        
      - if: matrix.os == 'ubuntu-latest'
        name: Build/release Electron app linux/x64
        run: pnpm make --arch=x64 --platform=linux
        
      - if: matrix.os == 'windows-latest'
        name: Build/release Electron app windows/x64
        run: pnpm make --arch=x64 --platform=win32

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: build
          path: |
            out/make/*